using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TodoAppMVVM.ViewModels;

namespace TodoApp.MVVM.EventCommands
{
    public class VisibilityCommand : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void OnPropertyChanged(string propertyName)
        {
            VerifyPropertyName(propertyName);
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        [Conditional("DEBUG")]
        private void VerifyPropertyName(string propertyName)
        {
            if (TypeDescriptor.GetProperties(this)[propertyName] == null)
                throw new ArgumentNullException(GetType().Name + " does not contain property: " + propertyName);
        }
        //#region Variables
        //public Visibility LblInvisibleTextVisibility
        //{
        //    get => _lblInvisibleTextVisibility;
        //    set
        //    {
        //        OnPropertyChanged(nameof(LblInvisibleTextVisibility)); //we are notifying the view that this property has been set, therefore the visibility has changed
        //        _lblInvisibleTextVisibility = value;
        //    }
        //}
        //private Visibility _lblInvisibleTextVisibility; //sub property used for holding values within the above monitored variable
        //#endregion

        //#region Constructor
        //public MainViewModel()
        //{
        //    if (File.Exists("TodoDatabase.db"))
        //    { }
        //    else
        //    {
        //        createDb.CreateDb();
        //    }
        //    //ItemQuery = _ItemQuery;
        //    //TodoQuery = _TodoQuery;
        //    //unitofWork = _unitofWork;
        //    //_dbConnect = dbConnect;
        //    unitofWork = new UnitOfWork();
        //    _dbConnect = new BuildConnection();
        //    //DbConnect db = new DbConnect();
        //    GetList();

        //    LblInvisibleTextVisibility = Visibility.Hidden; //reset initial value
        //    BtnToggleLblVisibilityDelegateCommand = new DelegateCommand(ToggleVisibility); //implement this method now, this delegate command will call this when started!
        //}
        //#endregion
        //#region Delegate Commands
        //public DelegateCommand BtnToggleLblVisibilityDelegateCommand { get; set; } //set the function this button push will call in constructor above even
        //#endregion
        //#region Delegate Command Functions
        //private void ToggleVisibility() //no parameters are allowed for this type of delegate command, however it is possible, i will attempt to do another vid on it
        //{
        //    if (LblInvisibleTextVisibility == Visibility.Visible) //if visible
        //    {
        //        LblInvisibleTextVisibility = Visibility.Hidden; //hide it
        //    }
        //    else //if hidden
        //    {
        //        LblInvisibleTextVisibility = Visibility.Visible; //show it
        //    }
        //    //with any luck, the button is bound to the 'BtnToggleLblVisibilityDelegateCommand' command, and the command calls THIS function, thus updateing the visibility of the label
        //    //LETS SEEEE
        //}
        //#endregion
        //#region Property Changed Logic -- autogenerated
        ///* Property changed logic -- notifies the view when something has changed that we are watching, for example the LblInvisibleTextVisibility property */
        //public event PropertyChangedEventHandler PropertyChanged;
        //[NotifyPropertyChangedInvocator]
        //protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        //{
        //    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        //}
        //#endregion
    }
}
