install mysql docker tutorial
https://www.youtube.com/watch?v=X8W5Xq9e2Os

Docker Compose with .NET Core & SQL Server (Step by Step)
https://www.youtube.com/watch?v=4V7CwC_4oss


https://www.youtube.com/results?search_query=how+to+connect+my+docker+api+to+docker+mysql+in+.net+core



//==========================================
version: '3.4'

services:
  todoapp.api:
    image: ${DOCKER_REGISTRY-}todoapp.api
    ports:
      - "8080:80"
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - db
    links:
      - db
  db:
    image: my-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=testroot
      - MYSQL_DATABASE=ppg_todo
    ports:
      - "3307:3306"
    volumes: 
      - d:\mysqldata:/var/lib/mysql

//=======================================================

version: '3.4'

services:
  todoapp.api:
    ports:
      - "8080:80"
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - db
  db:
    image: mysql/mysql-server:5.6.50
    environment:
      - MYSQL_ROOT_PASSWORD=testroot
      - MYSQL_DATABASE=ppg_todo
    ports:
      - "3307:3306"
    volumes: 
      - d:\mysqldata:/var/lib/mysql


      //==========================================================
version: '3.4'

services:
  db:
    image: mysql:5.6.50
    container_name: mysqldb
    environment:
      - MYSQL_ROOT_PASSWORD=testroot
      - MYSQL_USER=testroot
      #- MYSQL_DATABASE=ppg_todo
    ports:
      - "3306:3306"
    restart: always
    volumes: 
      - d:\mysqldata:/var/lib/mysql

  todoapp.api:
    image: ${DOCKER_REGISTRY-}todoappapi
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8000:80"
    depends_on:
      - db

 //=======================================================
 #See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.

FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443

FROM mcr.microsoft.com/dotnet/core/sdk:3.1-buster AS build
WORKDIR /src
COPY ["TodoApp.API.csproj", "TodoApp.API"]
RUN dotnet restore "TodoApp.API/TodoApp.API.csproj"
COPY . .
WORKDIR "/src/."
RUN dotnet build "TodoApp.API.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "TodoApp.API.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "TodoApp.API.dll"]